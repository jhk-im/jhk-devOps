name: DEV - Deploy to Amazon EKS - Python

on:
  push:
    branches: [dev]
    paths-ignore:
      - ".github/**"

env:
  # Organization Secrets
  AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
  EKS_CLUSTER: ${{ secrets.DEV_EKS_CLUSTER_NAME }}
  ECR_REPOSITORY: ${{ secrets.DEV_ECR_REPOSITORY }}
  APP_NAME: app-sample
  AWS_REGION: ap-northeast-2
  DEPLOYMENT_NAME: app-sample-deployment
  YAML_ENV: yaml

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      # 소스 가져오기
      - name: Checkout
        uses: actions/checkout@v2

      # Github env 설정
      - name: Setting Env
        run: echo "IMAGE_TAG=$(cat env/imageTag)" >> $GITHUB_ENV

      # AWS credentials 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # AWS ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Docker 빌드 및 ECR로 Push 진행
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    needs: build
    name: Deploy to DEV Environment
    runs-on: ubuntu-latest

    steps:
      # 소스 가져오기
      - name: Checkout
        uses: actions/checkout@v2

      # AWS credentials 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # AWS ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # EKS 배포를 위한 Kubeconfig 설정
      - name: Setup kubeconfig
        id: setup-kubeconfig
        env:
          EKS_CLUSTER: ${{ env.EKS_CLUSTER }}
        run: |
          aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER

      # EKS로 배포
      - name: Deploy to EKS
        id: deploy-eks
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          cd $YAML_ENV
          kustomize edit set image kustomization-eks-repository=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          kustomize build . | kubectl apply -k ./

      - name: Verify Deployment
        env:
          KUBE_NAMESPACE: ${{ env.KUBE_NAMESPACE }}
          DEPLOYMENT_NAME: ${{ env.DEPLOYMENT_NAME }}
        run: |
          kubectl rollout status deployment/$DEPLOYMENT_NAME -n $KUBE_NAMESPACE
          kubectl get deployments
          kubectl get services -o wide
          kubectl get ingress
          kubectl get pod
